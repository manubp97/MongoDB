#1. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

db.restaurants.find( { borough: "Bronx" } ).skip(5).limit(5)

#2. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.

db.restaurants.find({$elemMatch:{"grades.score":{$gt: 80, $lt: 100}}})

#3. Write a MongoDB query to find the restaurants that does not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

db.restaurants.find({$and: [{cuisine:{$ne: "American"}}, {"grades.score": {$gt: 70}}, {"address.coord.0": {$lt: -65.754168 }}]})

#4. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Reg' as three letters somewhere in its name.

db.restaurants.find( {name: {$regex: "reg"}} ,{ name: 1, borough: 1, cuisine: 1 }) 

#5. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belongs to the borough Staten Island or Queens or Bronx or Brooklyn.

db.restaurants.find({borough: {$in: ["Staten Island", "Queens","Bronx","Brooklyn"]}}, { name: 1, borough: 1, cuisine: 1 })

#6. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinese' or restaurant's name begins with letter 'Wil'.

db.restaurants.find({$or: [{cuisine: {$nin:["American", "Chinese"]}}, {name: {$regex: "^Wil"}} ]}, { name: 1, borough: 1, cuisine: 1 })

#7. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where 2nd element of grades array contains a grade of "A" and score 9 on an ISODate("2014-08-11T00:00:00Z").

db.restaurants.find({$and: [{"grades.1.grade": "A", "grades.1.score": 9, "grades.1.date":ISODate("2014-08-11T00:00:00Z")}]}, { name: 1, grades: 1 })